# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import pickle
import struct
import time
from os import system, name

import cv2
from os import error
from pathlib import Path
import threading, socket
from tkinter import *
import pyautogui as pyautogui
from comp import CustomText
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


SERVER = '127.0.0.1'
PORT = 1212
ADDR = (SERVER, PORT)

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(ADDR)

def clear():
    # for windows
    if name == 'nt':
        _ = system('cls')
    # for mac and linux(here, os.name is 'posix')
    else:
        _ = system('clear')
class GUI:
    def __init__(self):
        window = Tk()

        window.geometry("700x400")
        window.configure(bg="#F9F9F9")

        canvas = Canvas(
            window,
            bg="#F9F9F9",
            height=400,
            width=700,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            265.5,
            177.0,
            image=entry_image_1
        )
        entry_1 = Text(
            bd=0,
            bg="#BCBAB8",
            highlightthickness=0
        )
        entry_1.place(
            x=57.0,
            y=28.0,
            width=417.0,
            height=296.0
        )

        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = canvas.create_image(
            589.5,
            177.0,
            image=entry_image_2
        )
        entry_2 = Text(
            bd=0,
            bg="#BCBAB8",
            highlightthickness=0
        )
        entry_2.place(
            x=518.0,
            y=28.0,
            width=143.0,
            height=296.0
        )

        button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_1 clicked"),
            relief="flat"
        )
        button_1.place(
            x=570.0,
            y=341.0,
            width=93.0,
            height=39.0
        )

        button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        button_2.place(
            x=451.0,
            y=341.0,
            width=93.0,
            height=39.0
        )

        button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_3 clicked"),
            relief="flat"
        )
        button_3.place(
            x=342.0,
            y=341.0,
            width=93.0,
            height=39.0
        )
        window.resizable(False, False)
        window.mainloop()

    def onModification(self, event):
        chars = event.widget.get("1.0", "end-1c")
        self.send_data(f'edit:{chars}')

    def sign_name(self, name):
        # the thread to receive messages
        rcv = threading.Thread(target=self.receive)
        rcv.start()
        self.send_data(f'name:{name}')

    # recieving data
    def receive(self):
        while True:
            try:
                message = client.recv(2048).decode()
                # handling incoming data
                if message.startswith('txt:'):
                    message = message[4:]
                    # self.entry_1.delete('1.0', END)
                    self.entry_1.replace('1.0', END, message)
                else:
                    message = '\n' + message
                    self.entry_2.insert(END, message)
            except error as e:
                print(e)
                # an error will be printed on the command line or console if there's an error
                print("An error occured!")
                client.close()
                break

    def send_data(self, message):
        while True:
            client.send(pickle.dumps(message))
            break

    def stream(self):
        t = time.time()
        while True:
            img = pyautogui.screenshot()
            a = pickle.dumps(img)
            client.sendall(struct.pack("Q", len(a)) + a)

            print(f'FPS: {60/(time.time() - t)}')
            clear()
            t = time.time()


g = GUI()
t = time.time()
while True:
    img = pyautogui.screenshot()
    a = pickle.dumps(img)
    client.sendall(a)
    print(f'FPS: {60/(time.time() - t)}')
    clear()
    t = time.time()